name: 🚀 Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Create Release
  # =============================================================================
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🔍 Run final quality checks
        run: |
          npm run lint
          npm run typecheck
          npm run test
      
      - name: 🏗️ Build application
        run: npm run build
      
      - name: 🚀 Create release
        id: release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 19
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # =============================================================================
  # Build Release Image
  # =============================================================================
  build-release-image:
    name: 🐋 Build Release Image
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}
      
      - name: 🐋 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.version }}
            type=raw,value=latest
      
      - name: 🏗️ Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
      
      - name: 🔒 Scan release image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}
          format: 'sarif'
          output: 'trivy-release-results.sarif'
      
      - name: 📤 Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-release-results.sarif'

  # =============================================================================
  # Generate SBOM
  # =============================================================================
  generate-sbom:
    name: 📋 Generate SBOM
    runs-on: ubuntu-latest
    needs: [release, build-release-image]
    if: needs.release.outputs.released == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 📋 Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: 📤 Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ needs.release.outputs.version }}
          path: sbom.spdx.json
          retention-days: 365
      
      - name: 📎 Attach SBOM to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          files: sbom.spdx.json

  # =============================================================================
  # Deploy to Production
  # =============================================================================
  deploy-production:
    name: 🌟 Deploy Release to Production
    runs-on: ubuntu-latest
    needs: [release, build-release-image]
    if: needs.release.outputs.released == 'true'
    environment:
      name: production
      url: https://synthetic-guardian.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}
      
      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: 🔐 Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
      
      - name: 🚀 Deploy release to production
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/synthetic-guardian \
            app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }} \
            -n synthetic-guardian
          kubectl rollout status deployment/synthetic-guardian \
            -n synthetic-guardian \
            --timeout=600s
      
      - name: 🧪 Run post-deployment tests
        run: |
          sleep 30
          curl -f https://synthetic-guardian.com/api/v1/health
          # Add more comprehensive post-deployment checks here
      
      - name: 📊 Update deployment metrics
        run: |
          echo "deployment_timestamp=$(date -u +%s)" >> $GITHUB_ENV
          echo "deployment_version=${{ needs.release.outputs.version }}" >> $GITHUB_ENV

  # =============================================================================
  # Post-Release Activities
  # =============================================================================
  post-release:
    name: 📈 Post-Release Activities
    runs-on: ubuntu-latest
    needs: [release, deploy-production]
    if: needs.release.outputs.released == 'true'
    
    steps:
      - name: 📢 Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🎉 Release ${{ needs.release.outputs.version }} deployed successfully!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚀 *Synthetic Data Guardian Release ${{ needs.release.outputs.version }}*\n\n✅ Successfully deployed to production\n🌐 Available at: https://synthetic-guardian.com\n📋 Release notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag }}"
                  }
                }
              ]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: 📧 Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✅ Release ${{ needs.release.outputs.version }} Deployed"
          body: |
            Release ${{ needs.release.outputs.version }} of Synthetic Data Guardian has been successfully deployed to production.
            
            🌐 Application URL: https://synthetic-guardian.com
            📋 Release Notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release.outputs.tag }}
            🐋 Container Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.version }}
            
            Deployment completed at: $(date)
          to: ${{ secrets.NOTIFICATION_EMAILS }}
          from: "Synthetic Guardian CI/CD <${{ secrets.EMAIL_USERNAME }}>"
      
      - name: 📊 Update documentation
        run: |
          # Trigger documentation update workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"docs-update","client_payload":{"version":"${{ needs.release.outputs.version }}"}}'
      
      - name: 🏷️ Create GitHub milestone
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.release.outputs.version }}';
            const nextMinorVersion = version.split('.').map((v, i) => i === 1 ? parseInt(v) + 1 : (i === 2 ? 0 : v)).join('.');
            
            try {
              await github.rest.issues.createMilestone({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `v${nextMinorVersion}`,
                description: `Next release milestone for v${nextMinorVersion}`,
                state: 'open'
              });
              console.log(`Created milestone for v${nextMinorVersion}`);
            } catch (error) {
              console.log(`Milestone might already exist: ${error.message}`);
            }