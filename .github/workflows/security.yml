name: 🔒 Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM UTC
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============================================================================
  # Dependency Scanning
  # =============================================================================
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: 🛡️ Run Snyk test
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-results.json
        continue-on-error: true
      
      - name: 🔒 Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
      
      - name: 📤 Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
      
      - name: 📊 Upload scan artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-scan-results
          path: |
            npm-audit.json
            snyk-results.json
            trivy-fs-results.sarif
          retention-days: 30

  # =============================================================================
  # Static Application Security Testing (SAST)
  # =============================================================================
  sast:
    name: 🔍 Static Code Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔒 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
      
      - name: 🔍 Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
      
      - name: 🛡️ Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/docker
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ github.event.deployment.id }}
        continue-on-error: true
      
      - name: 🔒 Run ESLint security plugin
        run: |
          npm ci
          npx eslint . --ext .js,.ts --format @microsoft/eslint-formatter-sarif --output-file eslint-security.sarif
        continue-on-error: true
      
      - name: 📤 Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-security.sarif

  # =============================================================================
  # Secret Scanning
  # =============================================================================
  secret-scan:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔍 Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: 🔐 Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      - name: 🔍 Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --disable-plugin AbsolutePathDetectorExperimental > .secrets.baseline
          detect-secrets audit .secrets.baseline --report --fail-on-unaudited
        continue-on-error: true

  # =============================================================================
  # Container Security
  # =============================================================================
  container-security:
    name: 🐋 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐋 Build test image
        run: |
          docker build -t test-image:latest .
      
      - name: 🔒 Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:latest'
          format: 'sarif'
          output: 'trivy-container.sarif'
      
      - name: 📤 Upload Trivy container results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container.sarif'
      
      - name: 🐋 Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security > docker-bench-results.txt
        continue-on-error: true
      
      - name: 📊 Upload container scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-results
          path: |
            trivy-container.sarif
            docker-bench-results.txt
          retention-days: 30

  # =============================================================================
  # Infrastructure as Code Security
  # =============================================================================
  iac-security:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,github_configuration
          output_format: sarif
          output_file_path: checkov-results.sarif
        continue-on-error: true
      
      - name: 📤 Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
      
      - name: 🔍 Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'docker'
          iac_dir: '.'
          policy_type: 'all'
          sarif_upload: true
        continue-on-error: true

  # =============================================================================
  # License Compliance
  # =============================================================================
  license-scan:
    name: 📄 License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Install dependencies
        run: npm ci
      
      - name: 📄 Run license check
        run: |
          npx license-checker --json > licenses.json
          npx license-checker --summary
      
      - name: 🔍 Run FOSSA scan
        uses: fossas/fossa-action@main
        if: ${{ secrets.FOSSA_API_KEY }}
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-tests: true
      
      - name: 📊 Upload license results
        uses: actions/upload-artifact@v3
        with:
          name: license-scan-results
          path: licenses.json
          retention-days: 30

  # =============================================================================
  # Security Report Generation
  # =============================================================================
  security-report:
    name: 📊 Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast, secret-scan, container-security, iac-security, license-scan]
    if: always()
    
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: 📊 Generate consolidated report
        run: |
          cat > security-report.md << 'EOF'
          # 🔒 Security Scan Report
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Date:** $(date -u)
          
          ## 📋 Scan Summary
          
          | Scan Type | Status |
          |-----------|--------|
          | Dependency Vulnerabilities | ${{ needs.dependency-scan.result }} |
          | Static Code Analysis | ${{ needs.sast.result }} |
          | Secret Detection | ${{ needs.secret-scan.result }} |
          | Container Security | ${{ needs.container-security.result }} |
          | Infrastructure Security | ${{ needs.iac-security.result }} |
          | License Compliance | ${{ needs.license-scan.result }} |
          
          ## 🔍 Detailed Results
          
          Results are available in the individual scan artifacts.
          
          ## 🚨 Action Items
          
          Please review the SARIF files and scan results for any high or critical severity issues that need immediate attention.
          
          ---
          
          Generated by GitHub Actions on $(date -u)
          EOF
      
      - name: 📤 Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 90
      
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # =============================================================================
  # Security Metrics
  # =============================================================================
  security-metrics:
    name: 📈 Update Security Metrics
    runs-on: ubuntu-latest
    needs: security-report
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📈 Update security scorecard
        run: |
          # Calculate security score based on scan results
          SECURITY_SCORE=85  # This would be calculated from actual scan results
          
          # Update metrics file
          cat > .github/security-metrics.json << EOF
          {
            "last_scan": "$(date -u --iso-8601)",
            "security_score": $SECURITY_SCORE,
            "dependency_vulnerabilities": 0,
            "code_quality_issues": 0,
            "secrets_found": 0,
            "container_vulnerabilities": 0,
            "license_issues": 0
          }
          EOF
      
      - name: 📊 Commit metrics update
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '📊 Update security metrics'
          file_pattern: '.github/security-metrics.json'
          commit_author: 'Security Bot <security@synthetic-guardian.com>'