[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "synthetic-data-guardian"
version = "1.0.0"
description = "Enterprise-grade synthetic data pipeline with built-in validation, watermarking, and auditable lineage tracking"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "Apache-2.0"}
authors = [
    {name = "Terragon Labs", email = "info@terragonlabs.com"},
]
maintainers = [
    {name = "Terragon Labs", email = "info@terragonlabs.com"},
]
keywords = [
    "synthetic-data",
    "privacy",
    "ai",
    "machine-learning",
    "data-science",
    "gdpr",
    "hipaa",
    "compliance",
    "watermarking",
    "lineage",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "neo4j>=5.14.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "sdv>=1.10.0",
    "ctgan>=0.8.0",
    "torch>=2.1.0",
    "transformers>=4.36.0",
    "diffusers>=0.24.0",
    "Pillow>=10.1.0",
    "cryptography>=41.0.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "structlog>=23.2.0",
    "typer>=0.9.0",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.2",
    "httpx>=0.25.0",
    "boto3>=1.34.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.2.0",
    "pytest-env>=1.1.0",
    "playwright>=1.40.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.6.0",
    "coverage[toml]>=7.3.0",
    "mutmut>=2.4.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "freezegun>=1.2.2",
    "responses>=0.24.0",
    "moto>=4.2.0",
    "testcontainers>=3.7.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-api>=1.0.3",
    "jaeger-client>=4.8.0",
    "sentry-sdk[fastapi]>=1.38.0",
]
all = [
    "synthetic-data-guardian[dev,docs,monitoring]",
]

[project.urls]
Homepage = "https://github.com/danieleschmidt/synthetic-data-guardian"
Documentation = "https://docs.terragonlabs.com/synthetic-guardian"
Repository = "https://github.com/danieleschmidt/synthetic-data-guardian.git"
"Bug Tracker" = "https://github.com/danieleschmidt/synthetic-data-guardian/issues"
Changelog = "https://github.com/danieleschmidt/synthetic-data-guardian/blob/main/CHANGELOG.md"

[project.scripts]
synthetic-guardian = "synthetic_guardian.cli:main"
sgd = "synthetic_guardian.cli:main"

[project.entry-points."synthetic_guardian.generators"]
sdv = "synthetic_guardian.generators.sdv:SDVGenerator"
ctgan = "synthetic_guardian.generators.ctgan:CTGANGenerator"
diffusion = "synthetic_guardian.generators.diffusion:DiffusionGenerator"
llm = "synthetic_guardian.generators.llm:LLMGenerator"

[project.entry-points."synthetic_guardian.validators"]
statistical = "synthetic_guardian.validators.statistical:StatisticalValidator"
privacy = "synthetic_guardian.validators.privacy:PrivacyValidator"
bias = "synthetic_guardian.validators.bias:BiasValidator"
quality = "synthetic_guardian.validators.quality:QualityValidator"

[project.entry-points."synthetic_guardian.watermarks"]
stegastamp = "synthetic_guardian.watermarks.stegastamp:StegaStampWatermarker"
statistical = "synthetic_guardian.watermarks.statistical:StatisticalWatermarker"

[tool.setuptools.packages.find]
where = ["src"]
include = ["synthetic_guardian*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
synthetic_guardian = [
    "templates/*.yaml",
    "templates/*.json",
    "static/*",
    "py.typed",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
known_first_party = ["synthetic_guardian"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=synthetic_guardian",
    "--cov-report=term-missing",
    "--cov-report=html:coverage_html",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--junit-xml=test-results.xml",
    "--durations=10",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "gpu: Tests requiring GPU",
    "external: Tests requiring external services",
    "security: Security-focused tests",
    "performance: Performance tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/setup.py",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "coverage_html"

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_error_codes = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "sdv.*",
    "ctgan.*",
    "neo4j.*",
    "prometheus_client.*",
    "structlog.*",
]
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_possible in tests

# MutMut configuration
[tool.mutmut]
paths_to_mutate = "src/"
backup = false
runner = "python -m pytest -xvs"
tests_dir = "tests/"
cache_only = false

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "migrations",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "ARG"]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["synthetic_guardian"]
force-single-line = true