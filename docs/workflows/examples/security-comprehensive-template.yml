# =============================================================================
# Comprehensive Security Scanning Workflow Template
# =============================================================================
# This workflow provides multi-layered security scanning including:
# - Static application security testing (SAST)
# - Dynamic application security testing (DAST)
# - Dependency vulnerability scanning
# - Container image security scanning
# - Infrastructure as Code (IaC) security scanning
# - License compliance checking

name: Comprehensive Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run comprehensive security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'sast-only'
          - 'dependencies-only'
          - 'containers-only'
          - 'infrastructure-only'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  # =============================================================================
  # Security Scan Planning
  # =============================================================================
  security-scan-matrix:
    name: Security Scan Planning
    runs-on: ubuntu-latest
    outputs:
      scan-sast: ${{ steps.plan.outputs.scan-sast }}
      scan-dependencies: ${{ steps.plan.outputs.scan-dependencies }}
      scan-containers: ${{ steps.plan.outputs.scan-containers }}
      scan-infrastructure: ${{ steps.plan.outputs.scan-infrastructure }}
      scan-dast: ${{ steps.plan.outputs.scan-dast }}
      
    steps:
      - name: Plan security scans
        id: plan
        run: |
          case "${{ github.event.inputs.scan_type || 'full' }}" in
            "full")
              echo "scan-sast=true" >> $GITHUB_OUTPUT
              echo "scan-dependencies=true" >> $GITHUB_OUTPUT
              echo "scan-containers=true" >> $GITHUB_OUTPUT
              echo "scan-infrastructure=true" >> $GITHUB_OUTPUT
              echo "scan-dast=true" >> $GITHUB_OUTPUT
              ;;
            "sast-only")
              echo "scan-sast=true" >> $GITHUB_OUTPUT
              echo "scan-dependencies=false" >> $GITHUB_OUTPUT
              echo "scan-containers=false" >> $GITHUB_OUTPUT
              echo "scan-infrastructure=false" >> $GITHUB_OUTPUT
              echo "scan-dast=false" >> $GITHUB_OUTPUT
              ;;
            "dependencies-only")
              echo "scan-sast=false" >> $GITHUB_OUTPUT
              echo "scan-dependencies=true" >> $GITHUB_OUTPUT
              echo "scan-containers=false" >> $GITHUB_OUTPUT
              echo "scan-infrastructure=false" >> $GITHUB_OUTPUT
              echo "scan-dast=false" >> $GITHUB_OUTPUT
              ;;
            "containers-only")
              echo "scan-sast=false" >> $GITHUB_OUTPUT
              echo "scan-dependencies=false" >> $GITHUB_OUTPUT
              echo "scan-containers=true" >> $GITHUB_OUTPUT
              echo "scan-infrastructure=false" >> $GITHUB_OUTPUT
              echo "scan-dast=false" >> $GITHUB_OUTPUT
              ;;
            "infrastructure-only")
              echo "scan-sast=false" >> $GITHUB_OUTPUT
              echo "scan-dependencies=false" >> $GITHUB_OUTPUT
              echo "scan-containers=false" >> $GITHUB_OUTPUT
              echo "scan-infrastructure=true" >> $GITHUB_OUTPUT
              echo "scan-dast=false" >> $GITHUB_OUTPUT
              ;;
          esac

  # =============================================================================
  # Static Application Security Testing (SAST)
  # =============================================================================
  sast-codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: security-scan-matrix
    if: needs.security-scan-matrix.outputs.scan-sast == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        language: [javascript, python]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: |
            security-extended
            security-and-quality
          config-file: ./.github/codeql/codeql-config.yml
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"
          upload: true

  sast-semgrep:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest
    needs: security-scan-matrix
    if: needs.security-scan-matrix.outputs.scan-sast == 'true'
    
    container:
      image: returntocorp/semgrep:latest
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Semgrep scan
        run: |
          semgrep \
            --config=auto \
            --config=p/security-audit \
            --config=p/secrets \
            --config=p/owasp-top-ten \
            --sarif \
            --output=semgrep-results.sarif \
            .
            
      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep-results.sarif

  sast-sonarqube:
    name: SonarQube Security Analysis
    runs-on: ubuntu-latest
    needs: security-scan-matrix
    if: needs.security-scan-matrix.outputs.scan-sast == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests with coverage
        run: npm run test:coverage
        
      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # =============================================================================
  # Dependency Vulnerability Scanning
  # =============================================================================
  dependency-scan-npm:
    name: NPM Dependency Security Scan
    runs-on: ubuntu-latest
    needs: security-scan-matrix
    if: needs.security-scan-matrix.outputs.scan-dependencies == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          
      - name: Snyk Node.js vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: |
            --severity-threshold=medium
            --sarif-file-output=snyk-node-results.sarif
            --json-file-output=snyk-node-results.json
            
      - name: Upload Snyk Node.js SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-node-results.sarif
          
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'synthetic-data-guardian'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nodeAuditSkipDevDependencies
            --nodePackageSkipDevDependencies
            
      - name: Upload OWASP Dependency Check results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  dependency-scan-python:
    name: Python Dependency Security Scan
    runs-on: ubuntu-latest
    needs: security-scan-matrix
    if: needs.security-scan-matrix.outputs.scan-dependencies == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit
          
      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-results.json || true
          safety check --format sarif --output safety-results.sarif || true
          
      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f sarif -o bandit-results.sarif
          bandit -r src/ -f json -o bandit-results.json
          
      - name: Upload Safety SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: safety-results.sarif
          
      - name: Upload Bandit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: bandit-results.sarif
          
      - name: Snyk Python vulnerability scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: |
            --severity-threshold=medium
            --sarif-file-output=snyk-python-results.sarif
            
      - name: Upload Snyk Python SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-python-results.sarif

  # =============================================================================
  # Container Security Scanning
  # =============================================================================
  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: security-scan-matrix
    if: needs.security-scan-matrix.outputs.scan-containers == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: synthetic-guardian:security-scan
          cache-from: type=gha
          
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'synthetic-guardian:security-scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy container SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-container-results.sarif'
          
      - name: Run Grype container scan
        uses: anchore/scan-action@v3
        with:
          image: 'synthetic-guardian:security-scan'
          output-format: sarif
          output-file: grype-container-results.sarif
          
      - name: Upload Grype container SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'grype-container-results.sarif'
          
      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: 'synthetic-guardian:security-scan'
          args: |
            --severity-threshold=medium
            --sarif-file-output=snyk-container-results.sarif
            
      - name: Upload Snyk container SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-container-results.sarif

  # =============================================================================
  # Infrastructure as Code Security Scanning
  # =============================================================================
  iac-security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    needs: security-scan-matrix
    if: needs.security-scan-matrix.outputs.scan-infrastructure == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Run Trivy IaC scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-iac-results.sarif'
          
      - name: Upload Trivy IaC SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-iac-results.sarif'
          
      - name: Run Checkov IaC scan
        uses: bridgecrewio/checkov-action@master
        with:
          output_format: sarif
          output_file_path: checkov-iac-results.sarif
          framework: dockerfile,kubernetes,terraform,cloudformation
          
      - name: Upload Checkov IaC SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-iac-results.sarif
          
      - name: Run TFSec Terraform scan
        if: hashFiles('**/*.tf') != ''
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec-results.sarif
          
      - name: Upload TFSec SARIF
        if: always() && hashFiles('**/*.tf') != ''
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec-results.sarif

  # =============================================================================
  # License Compliance Scanning
  # =============================================================================
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    needs: security-scan-matrix
    if: needs.security-scan-matrix.outputs.scan-dependencies == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run license-checker
        run: |
          npx license-checker \
            --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' \
            --excludePackages 'synthetic-data-guardian' \
            --json \
            --out license-check-results.json
            
      - name: Run FOSSA license scan
        if: env.FOSSA_API_KEY != ''
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa analyze
          fossa test
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
          
      - name: Upload license scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: license-scan-results
          path: license-check-results.json

  # =============================================================================
  # Dynamic Application Security Testing (DAST)
  # =============================================================================
  dast-zap-scan:
    name: OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    needs: security-scan-matrix
    if: needs.security-scan-matrix.outputs.scan-dast == 'true' && github.event_name != 'pull_request'
    
    services:
      app:
        image: synthetic-guardian:latest
        ports:
          - 8080:8080
        env:
          NODE_ENV: test
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Wait for application to be ready
        run: |
          until curl -f http://localhost:8080/health; do
            echo "Waiting for application..."
            sleep 5
          done
          
      - name: OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d -T 60 -m 10'
          
      - name: OWASP ZAP full scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -d -T 60'
          
      - name: Upload ZAP scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-results
          path: report_*

  # =============================================================================
  # Security Report Aggregation
  # =============================================================================
  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [
      sast-codeql,
      sast-semgrep,
      sast-sonarqube,
      dependency-scan-npm,
      dependency-scan-python,
      container-security-scan,
      iac-security-scan,
      license-compliance,
      dast-zap-scan
    ]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate security summary report
        run: |
          cat > security-summary.md << 'EOF'
          # Security Scan Summary Report
          
          ## Scan Results Overview
          
          | Scan Type | Status | Critical | High | Medium | Low |
          |-----------|--------|----------|------|--------|-----|
          | SAST (CodeQL) | ${{ needs.sast-codeql.result }} | - | - | - | - |
          | SAST (Semgrep) | ${{ needs.sast-semgrep.result }} | - | - | - | - |
          | Dependencies (NPM) | ${{ needs.dependency-scan-npm.result }} | - | - | - | - |
          | Dependencies (Python) | ${{ needs.dependency-scan-python.result }} | - | - | - | - |
          | Container Scan | ${{ needs.container-security-scan.result }} | - | - | - | - |
          | IaC Scan | ${{ needs.iac-security-scan.result }} | - | - | - | - |
          | License Compliance | ${{ needs.license-compliance.result }} | - | - | - | - |
          | DAST Scan | ${{ needs.dast-zap-scan.result }} | - | - | - | - |
          
          ## Recommendations
          
          - Review all CRITICAL and HIGH severity findings immediately
          - Update vulnerable dependencies as soon as possible
          - Address container security issues before deployment
          - Ensure all code changes follow security best practices
          
          ## Next Steps
          
          1. Review detailed findings in the Security tab
          2. Create issues for critical vulnerabilities
          3. Update security policies if needed
          4. Schedule regular security reviews
          
          Generated on: $(date)
          EOF
          
      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary-report
          path: security-summary.md
          
      - name: Post security summary as comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # =============================================================================
  # Security Alerts & Notifications
  # =============================================================================
  security-notifications:
    name: Security Alert Notifications
    runs-on: ubuntu-latest
    needs: security-report
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            🚨 **Security Scan Failed**
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Please review the security findings and take immediate action.
            
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}
          
      - name: Create security issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Scan Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `
              ## Security Scan Failure Alert
              
              **Branch:** ${context.ref}
              **Commit:** ${context.sha}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              ### Action Required
              - [ ] Review security scan results
              - [ ] Address critical and high severity findings
              - [ ] Update vulnerable dependencies
              - [ ] Re-run security scans after fixes
              
              ### Links
              - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - [Security Tab](${context.payload.repository.html_url}/security)
              `,
              labels: ['security', 'critical', 'automated']
            });